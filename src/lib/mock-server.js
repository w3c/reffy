/**
 * Setup a proxy server that intercepts some network requests. To be used in
 * tests not to hit the network.
 *
 * @module mock-server
 */

const { MockAgent, setGlobalDispatcher } = require('undici');
const path = require("path");
const { existsSync, readFileSync } = require('fs');

/**
 * Determine the path to the "node_modules" folder. The path depends on whether
 * Reffy is run directly, or installed as a library.
 *
 * @function
 * @return {String} Path to the node_modules folder.
 */
function getModulesFolder() {
    const rootFolder = path.resolve(__dirname, '../..');
    let folder = path.resolve(rootFolder, 'node_modules');
    if (existsSync(folder)) {
        return folder;
    }
    folder = path.resolve(rootFolder, '..');
    return folder;
}
const modulesFolder = getModulesFolder();

const mockSpecs = {
  "/woff/woff2/": {
    html: `
      <title>WOFF2</title>
      <body>
        <dfn id='foo' data-dfn-type="dfn">Foo</dfn>
        <a href="https://www.w3.org/TR/bar/#baz">bar</a>
        <ul class='toc'><li><a href='page.html'>page</a></ul>`,
    pages: {
      "page.html": `<h2 id='bar'>Heading in subpage</h2>`
    }
  },
  "/mediacapture-output/": `
    <script>respecConfig = { shortName: 'test' };</script>
    <script src='https://www.w3.org/Tools/respec/respec-w3c'></script>
    <div id=abstract></div>
    <pre class='idl'>[Exposed=Window] interface Foo { attribute DOMString bar; };</pre>`,
  "/accelerometer/": `<html>
    <h2>Normative references</h2>
    <dl>
      <dt>FOO</dt>
      <dd><a href='https://www.w3.org/TR/Foo'>Foo</a></dd>
    </dl>`,
  "/pointerlock/": `<html>
    <h1>Pointer Lock 2.0`,
  "/TR/remote-playback/": {
    html: `<title>Published version</title>
      <body><h1>Published version</h1></body>`,
    domain: 'https://www.w3.org'
  }
};

const respecHiglight = readFileSync(
  path.join(modulesFolder, "respec-hljs", "dist", "respec-highlight.js"),
  'utf8'
);
const respecW3C = readFileSync(
  path.join(modulesFolder, "respec", "builds", "respec-w3c.js"),
  'utf8'
);

const mockAgent = new MockAgent();
setGlobalDispatcher(mockAgent);
mockAgent.disableNetConnect();
// for chrome devtool protocol
mockAgent.enableNetConnect('127.0.0.1');

for (const [path, desc] of Object.entries(mockSpecs)) {
  mockAgent.get(desc.domain || "https://w3c.github.io")
    .intercept({ method: "GET", path })
    .reply(200, desc.html || desc, {
      headers: { "Content-Type": "text/html" }
    })
    .persist();

  for (const [page, pageContent] of Object.entries(desc.pages || {})) {
    mockAgent.get(desc.domain || "https://w3c.github.io")
      .intercept({ method: "GET", path: path + page })
      .reply(200, pageContent, {
        headers: { "Content-Type": "text/html" }
      })
      .persist();
  }
}


// Handling requests generated by ReSpec documents
mockAgent
  .get("https://api.specref.org")
  .intercept({ method: "GET", path: "/bibrefs?refs=webidl" })
  .reply(200, { webidl: { href: "https://webidl.spec.whatwg.org/" } }, {
    headers: {
      "Content-Type": "application/json",
      "Access-Control-Allow-Origin": "*"
    }
  })
  .persist();

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/scripts/TR/2021/fixup.js" })
  .reply(200, '')
  .persist();

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/StyleSheets/TR/2021/logos/W3C" })
  .reply(200, '')
  .persist();

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/StyleSheets/TR/2021/base.css" })
  .reply(200, '')
  .persist();

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/Tools/respec/respec-highlight" })
  .reply(200, respecHiglight, {
    headers: { "Content-Type": "application/js" }
  })
  .persist();

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/Tools/respec/respec-w3c" })
  .reply(200, respecW3C, {
    headers: { "Content-Type": "application/js" }
  })
  .persist();

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/TR/idontexist/" })
  .reply(404, '');

mockAgent
  .get("https://www.w3.org")
  .intercept({ method: "GET", path: "/TR/ididnotchange/" })
  .reply(({ headers }) => {
    // NB: the headers parameters is not an instance of Headers as suggested in
    // examples, e.g.:
    // https://github.com/nodejs/undici/blob/main/docs/api/MockPool.md#example---mocked-request-using-reply-options-callback
    // It is rather an array that alternates header names and header values.
    const pos = headers.findIndex(h => h === 'If-Modified-Since');
    if (pos === -1) {
      return { statusCode: 200, data: 'Unexpected If-Modified-Since header' };
    }
    const value = headers[pos+1];
    if (value === "Fri, 11 Feb 2022 00:00:42 GMT") {
      return { statusCode: 304 };
    } else {
      return { statusCode: 200, data: 'Unexpected If-Modified-Since header' };
    }
  });

mockAgent
  .get("https://drafts.csswg.org")
  .intercept({ method: "GET", path: "/server-hiccup/" })
  .reply(200,
    `<html><title>Server hiccup</title>
    <h1> Index of Server Hiccup Module Level 42 </h1>`,
    { header: { "Content-Type": "text/html" } })
  .persist();

/*nock.emitter.on('error', function (err) {
  console.error(err);
});
nock.emitter.on('no match', function(req, options, requestBody) {
  // 127.0.0.1 is used by the devtool protocol, we ignore it
  if (req && req.hostname !== '127.0.0.1') {
    console.error("No match for nock request on " + (options ? options.href : req.href));
  }
});*/

module.exports = mockAgent;
